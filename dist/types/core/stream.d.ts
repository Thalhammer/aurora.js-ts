import { BufferList } from './buffer-list';
import { Buffer } from './buffer';
export declare class Stream {
    localOffset: number;
    offset: number;
    private buf;
    private uint8;
    private int8;
    private uint16;
    private int16;
    private uint32;
    private int32;
    private float32;
    private float64;
    private nativeEndian;
    private list;
    constructor(list: BufferList);
    static fromBuffer(buffer: any): Stream;
    copy(): Stream;
    available(bytes: number): boolean;
    remainingBytes(): number;
    advance(bytes: number): Stream;
    rewind(bytes: number): Stream;
    seek(position: number): void;
    readUInt8(): number;
    peekUInt8(offset?: number): number;
    read(bytes: number, litteEndian?: boolean): void;
    peek(bytes: number, offset: number, litteEndian?: boolean): void;
    readInt8(): number;
    peekInt8(offset?: number): number;
    readUInt16(litteEndian?: boolean): number;
    peekUInt16(offset?: number, litteEndian?: boolean): number;
    readInt16(litteEndian?: boolean): number;
    peekInt16(offset?: number, litteEndian?: boolean): number;
    readUInt24(litteEndian?: boolean): number;
    peekUInt24(offset?: number, litteEndian?: boolean): number;
    readInt24(litteEndian?: boolean): number;
    peekInt24(offset?: number, litteEndian?: boolean): number;
    readUInt32(litteEndian?: boolean): number;
    peekUInt32(offset?: number, litteEndian?: boolean): number;
    readInt32(litteEndian?: boolean): number;
    peekInt32(offset?: number, litteEndian?: boolean): number;
    readFloat32(litteEndian?: boolean): number;
    peekFloat32(offset?: number, litteEndian?: boolean): number;
    readFloat64(litteEndian?: boolean): number;
    peekFloat64(offset?: number, litteEndian?: boolean): number;
    readFloat80(littleEndian?: boolean): number;
    peekFloat80(offset?: number, litteEndian?: boolean): number;
    readBuffer(length: number): Buffer;
    peekBuffer(offset: number, length: number): Buffer;
    readSingleBuffer(length: number): Buffer;
    peekSingleBuffer(offset: number, length: number): Buffer;
    readString(length: number, encoding?: string): string;
    peekString(offset: number, length: number, encoding?: string): string;
    private float64Fallback;
    private decodeString;
    private float80;
}
